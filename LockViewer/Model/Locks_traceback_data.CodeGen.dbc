;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Technology Evangelist
;;
;; Template Name:   Symphony Framework : SYMPHONY_DATA_V3_2.tpl
;;
;;***************************************************************************
import System
import System.Collections
import System.Collections.Generic
import System.Collections.ObjectModel
import System.Collections.Specialized
import System.Text
import System.Runtime.InteropServices
import System.IO

import Symphony.Conductor.Model
import Symphony.Conductor.Converters

import System.Reflection
import System.Runtime.Serialization
import Newtonsoft.Json


namespace LockViewer.Model

    ;;define a structure that we can use around the applicaiton

	structure STRLocks_traceback
		.include 'locks_traceback' repository  , norecord, prefix = "str_"
	endstructure

	{JsonObject(MemberSerialization.OptIn)}
    public partial class Locks_traceback_Data extends Symphony.Conductor.Model.DataObjectBase

		private cls structure clsstrLocks_traceback
.align
			public csGuid, String
.align
			public csLine_number, Int32
.align
			public csRoutine_line_number, Int32
.align
			public csRoutine, String
.align
			public csSpare, String
		endstructure
		
		public static SynergyMemberInfo, @List<System.Reflection.MemberInfo>

		public const RPSStructureName	,String	,"LOCKS_TRACEBACK"
		public const RPSStructureSize	,Int32	,100

		private locks_traceback_main	,STRLocks_traceback

		private mDoneSynergyRecordValue	,boolean
		
		;;use symphony converters
		private mDateConveter   ,@SynergyDecimalDateConverter ,new SynergyDecimalDateConverter()
		private mAlphaConveter	,@SynergyAlphaConverter ,new SynergyAlphaConverter()
		private mDecimalConveter  ,@SynergyDecimalConverter ,new SynergyDecimalConverter()
		private mImpliedDecimalConveter ,@SynergyImpliedDecimalConverter  ,new SynergyImpliedDecimalConverter()
		private mIntegerConveter  ,@SynergyIntConverter ,new SynergyIntConverter()
		private mAlphaYNConveter	,@SynergyAlphaYNConverter, new SynergyAlphaYNConverter()

		static method Locks_traceback_Data
			endparams
		proc
			data objectType = ^typeof(Locks_traceback_Data)
			SynergyMemberInfo = new List<System.Reflection.MemberInfo>() {
			&	^as(RuntimeReflectionExtensions.GetRuntimeProperty(objectType, "SerializableSynergyRecord"), @System.Reflection.MemberInfo)
			& }
			defineSerialiazableDataElements()

			mStaticFieldList = new List<BaseFieldInformation>()
			mStaticFieldDictionary = new Dictionary<string, int>()
			mStaticFieldNameList = new List<String>()
			mStaticFieldHeadingList = new List<String>()

			
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "GUID", "Guid",  "", "",
			&	"", "GUID", 1, 50,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "LINE_NUMBER", "Line_number",  "", "",
			&	"", "LINE_NUMBER", 51, 4,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 9999)

			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "ROUTINE_LINE_NUMBER", "Routine_line_number",  "", "",
			&	"", "ROUTINE_LINE_NUMBER", 55, 4,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 9999)

			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "ROUTINE", "Routine",  "", "",
			&	"", "ROUTINE", 59, 32,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "SPARE", "Spare",  "", "",
			&	"", "SPARE", 91, 10,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)


			mStaticFieldNameList.Add("Guid")
			mStaticFieldHeadingList.Add("GUID")
			mStaticFieldNameList.Add("Line_number")
			mStaticFieldHeadingList.Add("LINE_NUMBER")
			mStaticFieldNameList.Add("Routine_line_number")
			mStaticFieldHeadingList.Add("ROUTINE_LINE_NUMBER")
			mStaticFieldNameList.Add("Routine")
			mStaticFieldHeadingList.Add("ROUTINE")
			mStaticFieldNameList.Add("Spare")
			mStaticFieldHeadingList.Add("SPARE")

			mreturn
		endmethod
		
		private partial static method defineSerialiazableDataElements, void
		endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Locks_traceback_Data
            endparams
            parent()
        proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			configureFieldInfo()
			setFieldNames()
			InitData()
			mDoneSynergyRecordValue = false
			extendedConstructor()
        endmethod

        ;;; <summary>
        ;;; Alternate constructor, accepts the inital value to assign to the object
        ;;; </summary>
        ;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
        public method Locks_traceback_Data
            in req synRec       ,String
            endparams
            parent()
        proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			locks_traceback_main = synRec
			extendedConstructor()
        endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		public method Locks_traceback_Data
			in req synRec       ,STRLocks_traceback
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			locks_traceback_main = synRec
			extendedConstructor()
		endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Locks_traceback_Data
			in req synRec       ,String
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			locks_traceback_main = synRec
			extendedConstructor()
		endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Locks_traceback_Data
			in req synRec       ,STRLocks_traceback
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			locks_traceback_main = synRec
			extendedConstructor()
		endmethod

        ;;Set up the arrays of field details
        private method configureFieldInfo	,void
			endparams
		proc
			
			mfieldArray = mStaticFieldList
			mfieldDictionary = mStaticFieldDictionary

		endmethod

		private static mStaticFieldList			,@List<BaseFieldInformation>
		private static mStaticFieldDictionary	,@Dictionary<string, int>
		private static mStaticFieldNameList		,@List<String>
		private static mStaticFieldHeadingList	,@List<String>

        ;;Set up the arrays of field names and headings
        private method setFieldNames	,void
			endparams
		proc

			mFieldNames = mStaticFieldNameList
			mFieldHeadings = mStaticFieldHeadingList
			
		endmethod

        ;;Expose fields as properties for data binding
        
        ;;Guid
		public property Guid, a50
			method get
			proc
				mreturn %atrim(locks_traceback_main.STR_Guid)
            endmethod
			method set
			proc
					if (locks_traceback_main.STR_Guid .nes. value)
				begin
										locks_traceback_main.STR_Guid = value
					ValidateEnteredData(1)
					RaisePropertyChanged("Guid")
				end
			endmethod
		endproperty
        ;;Line_number
		public property Line_number, d4
			method get
			proc
                mreturn locks_traceback_main.STR_Line_number
            endmethod
			method set
			proc
				if (locks_traceback_main.STR_Line_number .ne. value)
				begin
										locks_traceback_main.STR_Line_number = value
					ValidateEnteredData(2)
					RaisePropertyChanged("Line_number")
				end
			endmethod
		endproperty
        ;;Routine_line_number
		public property Routine_line_number, d4
			method get
			proc
                mreturn locks_traceback_main.STR_Routine_line_number
            endmethod
			method set
			proc
				if (locks_traceback_main.STR_Routine_line_number .ne. value)
				begin
										locks_traceback_main.STR_Routine_line_number = value
					ValidateEnteredData(3)
					RaisePropertyChanged("Routine_line_number")
				end
			endmethod
		endproperty
        ;;Routine
		public property Routine, a32
			method get
			proc
				mreturn %atrim(locks_traceback_main.STR_Routine)
            endmethod
			method set
			proc
					if (locks_traceback_main.STR_Routine .nes. value)
				begin
										locks_traceback_main.STR_Routine = value
					ValidateEnteredData(4)
					RaisePropertyChanged("Routine")
				end
			endmethod
		endproperty
        ;;Spare
		public property Spare, a10
			method get
			proc
				mreturn %atrim(locks_traceback_main.STR_Spare)
            endmethod
			method set
			proc
					if (locks_traceback_main.STR_Spare .nes. value)
				begin
										locks_traceback_main.STR_Spare = value
					ValidateEnteredData(5)
					RaisePropertyChanged("Spare")
				end
			endmethod
		endproperty
			
        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, String
            method get
            proc
                mreturn (String)Locks_traceback_main
            endmethod
            method set
            proc
				if (!mDoneSynergyRecordValue)
					OriginalSynergyRecord = value

				mDoneSynergyRecordValue = true
				
				setUsed()
                Locks_traceback_main = value

                ;;Signal that all fields have changed
                
				SetFieldValid("Guid")
									if (mValidateSynergyData) ValidateEnteredData(1)
				SetFieldValid("Line_number")
									if (mValidateSynergyData) ValidateEnteredData(2)
				SetFieldValid("Routine_line_number")
									if (mValidateSynergyData) ValidateEnteredData(3)
				SetFieldValid("Routine")
									if (mValidateSynergyData) ValidateEnteredData(4)
				SetFieldValid("Spare")
									if (mValidateSynergyData) ValidateEnteredData(5)
				RaisePropertyChanged(^null)
				RaiseSynergyRecordChanged()
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allow the host to initialise all fields.
        ;;; </summary>
        public override method InitData ,void
        proc
			init Locks_traceback_main

			RaisePropertyChanged(^null)
			parent.InitData()
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
            endparams
        proc
			
				            ValidateEnteredData(1)
            RaisePropertyChanged("Guid")
				            ValidateEnteredData(2)
            RaisePropertyChanged("Line_number")
				            ValidateEnteredData(3)
            RaisePropertyChanged("Routine_line_number")
				            ValidateEnteredData(4)
            RaisePropertyChanged("Routine")
				            ValidateEnteredData(5)
            RaisePropertyChanged("Spare")

        endmethod

        ;;; <summary>
        ;;; Indicate from the UI which field now has focus. This then signals the
        ;;; CurrentFieldInfo change event so the UI can get the current field details
        ;;; </summary>
        ;;; <param name="fieldName">Name of field with focus</param>
        public override method SetFieldFocusFlag    ,void
            in req fieldName                        ,String
            endparams
        proc
            using fieldName select
			
			
            ("GUID"), mCurrentField = 1
			
            ("LINE_NUMBER"), mCurrentField = 2
			
            ("ROUTINE_LINE_NUMBER"), mCurrentField = 3
			
            ("ROUTINE"), mCurrentField = 4
			
            ("SPARE"), mCurrentField = 5
            (),
                mCurrentField = 0
            endusing
            RaisePropertyChanged("CurrentFieldInfo")
        endmethod

        ;;; <summary>
        ;;; Expose information about the current field
        ;;; </summary>
        ;;; <returns>Current field information</returns>
        public property CurrentFieldInfo    ,String
            method get
            proc
                using mCurrentField select
				
				
                (1),    mreturn ""
				
                (2),    mreturn ""
				
                (3),    mreturn ""
				
                (4),    mreturn ""
				
                (5),    mreturn ""
				(), mreturn ""  ;;if incorrect field value or not configured, ensure we clear the return value
                endusing
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are enabled
        
		

        public property GuidIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(1)
            endmethod
            method set
            proc
                SetFieldEnabledState(1, value)
                RaiseNonRPSPropertyChanged("GuidIsEnabled")
            endmethod
        endproperty
		

        public property Line_numberIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(2)
            endmethod
            method set
            proc
                SetFieldEnabledState(2, value)
                RaiseNonRPSPropertyChanged("Line_numberIsEnabled")
            endmethod
        endproperty
		

        public property Routine_line_numberIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(3)
            endmethod
            method set
            proc
                SetFieldEnabledState(3, value)
                RaiseNonRPSPropertyChanged("Routine_line_numberIsEnabled")
            endmethod
        endproperty
		

        public property RoutineIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(4)
            endmethod
            method set
            proc
                SetFieldEnabledState(4, value)
                RaiseNonRPSPropertyChanged("RoutineIsEnabled")
            endmethod
        endproperty
		

        public property SpareIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(5)
            endmethod
            method set
            proc
                SetFieldEnabledState(5, value)
                RaiseNonRPSPropertyChanged("SpareIsEnabled")
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are focussed
		private mGuidIsFocused	,Boolean
		public property GuidIsFocused, Boolean
			method get
			proc
				mreturn mGuidIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mGuidIsFocused = value
				RaiseNonRPSPropertyChanged("GuidIsFocused")
			endmethod
		endproperty
		private mLine_numberIsFocused	,Boolean
		public property Line_numberIsFocused, Boolean
			method get
			proc
				mreturn mLine_numberIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mLine_numberIsFocused = value
				RaiseNonRPSPropertyChanged("Line_numberIsFocused")
			endmethod
		endproperty
		private mRoutine_line_numberIsFocused	,Boolean
		public property Routine_line_numberIsFocused, Boolean
			method get
			proc
				mreturn mRoutine_line_numberIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mRoutine_line_numberIsFocused = value
				RaiseNonRPSPropertyChanged("Routine_line_numberIsFocused")
			endmethod
		endproperty
		private mRoutineIsFocused	,Boolean
		public property RoutineIsFocused, Boolean
			method get
			proc
				mreturn mRoutineIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mRoutineIsFocused = value
				RaiseNonRPSPropertyChanged("RoutineIsFocused")
			endmethod
		endproperty
		private mSpareIsFocused	,Boolean
		public property SpareIsFocused, Boolean
			method get
			proc
				mreturn mSpareIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mSpareIsFocused = value
				RaiseNonRPSPropertyChanged("SpareIsFocused")
			endmethod
		endproperty

        ;;Expose properties to indicate whether fields are read only
		
		

		public property GuidIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(1)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(1, value)
				RaiseNonRPSPropertyChanged("GuidIsReadOnly")
			endmethod
		endproperty
		

		public property Line_numberIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(2)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(2, value)
				RaiseNonRPSPropertyChanged("Line_numberIsReadOnly")
			endmethod
		endproperty
		

		public property Routine_line_numberIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(3)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(3, value)
				RaiseNonRPSPropertyChanged("Routine_line_numberIsReadOnly")
			endmethod
		endproperty
		

		public property RoutineIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(4)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(4, value)
				RaiseNonRPSPropertyChanged("RoutineIsReadOnly")
			endmethod
		endproperty
		

		public property SpareIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(5)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(5, value)
				RaiseNonRPSPropertyChanged("SpareIsReadOnly")
			endmethod
		endproperty

		private doingClearFocus	,Boolean

		private method clearFocus, void
			endparams
		proc
			if (!doingClearFocus)
			begin
				doingClearFocus = true
				if (GuidIsFocused) GuidIsFocused = false
				if (Line_numberIsFocused) Line_numberIsFocused = false
				if (Routine_line_numberIsFocused) Routine_line_numberIsFocused = false
				if (RoutineIsFocused) RoutineIsFocused = false
				if (SpareIsFocused) SpareIsFocused = false
				doingClearFocus = false
			end
		endmethod

		public method FieldErrorDetails	,void
			in req fldName				,String
			in req errorText			,String
			endparams
		proc
			setErrorDetails(fldName, errorText)
			RaisePropertyChanged(fldName)
		endmethod

		public method FieldValidDetails	,void
			in req fldName				,String
			endparams
		proc
			SetFieldValid(fldName)
			RaisePropertyChanged(fldName)
		endmethod

		public override method CompareObjects	,int
			in req obj1							,@Object
			in req obj2							,@Object
			in req colName						,String
			in req sortDir						,Symphony.Conductor.Framework.SynergySortOrder
			endparams

			record
				result		,int
			endrecord
		proc
			using colName select
			("Guid"),
			begin
				if (((Locks_traceback_Data)obj1).Guid == ((Locks_traceback_Data)obj2).Guid) then
					result = 0
				else
				begin
					if (((Locks_traceback_Data)obj1).Guid > ((Locks_traceback_Data)obj2).Guid) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Line_number"),
			begin
				if (((Locks_traceback_Data)obj1).Line_number == ((Locks_traceback_Data)obj2).Line_number) then
					result = 0
				else
				begin
					if (((Locks_traceback_Data)obj1).Line_number > ((Locks_traceback_Data)obj2).Line_number) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Routine_line_number"),
			begin
				if (((Locks_traceback_Data)obj1).Routine_line_number == ((Locks_traceback_Data)obj2).Routine_line_number) then
					result = 0
				else
				begin
					if (((Locks_traceback_Data)obj1).Routine_line_number > ((Locks_traceback_Data)obj2).Routine_line_number) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Routine"),
			begin
				if (((Locks_traceback_Data)obj1).Routine == ((Locks_traceback_Data)obj2).Routine) then
					result = 0
				else
				begin
					if (((Locks_traceback_Data)obj1).Routine > ((Locks_traceback_Data)obj2).Routine) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Spare"),
			begin
				if (((Locks_traceback_Data)obj1).Spare == ((Locks_traceback_Data)obj2).Spare) then
					result = 0
				else
				begin
					if (((Locks_traceback_Data)obj1).Spare > ((Locks_traceback_Data)obj2).Spare) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			(),
				result = this.CustomCompareObjects(obj1, obj2, colName, sortDir)
			endusing

			mreturn result
		endmethod
		
.region "Serialization over Symphony Bridge"
		
		
		{JsonProperty}
		public property SerializableSynergyRecord, [#]byte
			method get
			proc
				data tmpSTR	,clsstrLocks_traceback
				tmpSTR.csGuid = (string)mAlphaConveter.Convert(locks_traceback_main.STR_guid, ^null, ^null, ^null)
				tmpSTR.csLine_number = (int32)mIntegerConveter.Convert(locks_traceback_main.STR_line_number, ^null, ^null, ^null)
				tmpSTR.csRoutine_line_number = (int32)mIntegerConveter.Convert(locks_traceback_main.STR_routine_line_number, ^null, ^null, ^null)
				tmpSTR.csRoutine = (string)mAlphaConveter.Convert(locks_traceback_main.STR_routine, ^null, ^null, ^null)
				tmpSTR.csSpare = (string)mAlphaConveter.Convert(locks_traceback_main.STR_spare, ^null, ^null, ^null)
				mreturn structureToByteArray(tmpSTR)
			endmethod
			method set
			proc
				data tmpSTR	,clsstrLocks_traceback
				tmpSTR = byteArrayToStructure(value)
				locks_traceback_main.STR_Guid = (a)mAlphaConveter.ConvertBack(tmpSTR.csGuid, ^null, ^null, ^null)
				locks_traceback_main.STR_Line_number = (d)((i)mIntegerConveter.ConvertBack(tmpSTR.csLine_number, ^null, ^null, ^null))
				locks_traceback_main.STR_Routine_line_number = (d)((i)mIntegerConveter.ConvertBack(tmpSTR.csRoutine_line_number, ^null, ^null, ^null))
				locks_traceback_main.STR_Routine = (a)mAlphaConveter.ConvertBack(tmpSTR.csRoutine, ^null, ^null, ^null)
				locks_traceback_main.STR_Spare = (a)mAlphaConveter.ConvertBack(tmpSTR.csSpare, ^null, ^null, ^null)
			endmethod
		endproperty
			
		private static method structureToByteArray	,[#]byte
			tmpSTRUCT				,clsstrLocks_traceback
			endparams
		proc
			data stream	,@MemoryStream , new MemoryStream()
			begin
				disposable data writer ,@BinaryWriter , new BinaryWriter(stream)
				writer.Write(tmpSTRUCT.csGuid)
				writer.Write(tmpSTRUCT.csLine_number.ToString())
				writer.Write(tmpSTRUCT.csRoutine_line_number.ToString())
				writer.Write(tmpSTRUCT.csRoutine)
				writer.Write(tmpSTRUCT.csSpare)
			end
			mreturn stream.ToArray()
		endmethod
		
		private static method byteArrayToStructure	,clsstrLocks_traceback
			bytearray, [#]byte  
			endparams
		proc
			data tmpString	,string
			data tmpSTRUCT	,clsstrLocks_traceback
			data stream	,@MemoryStream	,new MemoryStream(byteArray)
			begin
				disposable data reader	,@BinaryReader	,new BinaryReader(stream)
				tmpSTRUCT.csGuid = reader.ReadString()
				tmpString = reader.ReadString()
				tmpSTRUCT.csLine_number = Convert.ToInt32(tmpString)
				tmpString = reader.ReadString()
				tmpSTRUCT.csRoutine_line_number = Convert.ToInt32(tmpString)
				tmpSTRUCT.csRoutine = reader.ReadString()
				tmpSTRUCT.csSpare = reader.ReadString()
			end

			mreturn tmpSTRUCT
		endmethod
		
		public override property StructureSize	,Int32
			method get
			proc
				mreturn RPSStructureSize
			endmethod
		endproperty

.endregion
		
	endclass
endnamespace

